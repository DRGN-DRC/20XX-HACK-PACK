'RANDOM' is Default Highlighted on Stage Select Screen
The cursor is set as if you had already dragged it over top of the "Random" selection.
[Jorgasms]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
PAL 1.00 ---- 0x8025B52C ---- 38E0001E -> 38E0001D
NTSC 1.00 --- 0x80259704 ---- 38E0001E -> 38E0001D
NTSC 1.01 --- 0x8025A274 ---- 38E0001E -> 38E0001D
NTSC 1.02 --- 0x8025AA10 ---- 38E0001E -> 38E0001D


	-==-


Stage Striking (v1.2)
- invisible stages
- includes prevention of striked stages from being randomly selected
[Sham Rock, Achilles, DRGN]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
NTSC 1.02 --- 0x80003304 ----

00000000 00000000

 -> 

# Cursor position storage area
00000000 00000000

------------- 0x8025A3BC ---- C022C9E8 -> Branch

# For each player, this checks for X/Y/Z
# button presses, and clears/resets stage icons.
39E00001 3E008046
6210B0FC 1E2F000C
7E31802E 5630014B
4182000C 3A200001
48000020 56300109
4182000C 3A200002
48000010 563002D7
418200E0 3A200003
3EA0803F 62B506D0
3EC0804D 62D66CAE
3A800000 3A600000
3A400000 2C110001
40820014 8A560000
2C12001C 418100AC
48000050 2C110003
40820010 3A80003F
3A600002 4800003C
1E12001C 7E10AA14
8AF0000A 3E008045
6210C388 82100000
7E10BC30 561007FF
41820010 3A600002
3A80003F 4800000C
3A600000 3A800000
1E12001C 7E10A82E
3AE00000 2C130002
4082001C 3EE00008
62F70008 2C120016
4180000C 3EE02000
62F70008 92F00014
1E12001C 3A100008
7E70A9AE 3A00001E
9A160000 2C110001
41820010 3A520001
2C12001D 41A0FF60
39EF0001 2C0F0005
41A0FEE4 C022C9E8
48000000

------------- 0x80259B68 ---- 7C1F002E -> Branch

# Prevents striked stages from 
# being randomly selected (part 1/2)
7FDF202E 2C1E0000
41820034 3CA08040
60A56708 80DE0000
7C062800 40820020
A3DE0014 2C1E0000
40820014 3FC08025
63DE9B8C 7FC803A6
4E800020 7C1F002E
48000000

------------- 0x80259A1C ---- 801C0004 -> Branch

# Prevents striked stages from 
# being randomly selected (part 2/2)
807C0000 2C030000
41820034 3CA08040
60A56708 80830000
7C042800 40820020
A0830014 2C040000
40820014 3C608025
60639A38 7C6803A6
4E800020 801C0004
48000000


	-==-


Reload SSS with D-Pad Up/Down
Checks for D-pad Up/Down inputs, and reloads the current scene with a different SSS file.
[Punkline, DRGN]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
NTSC 1.02 ---- 0x2586DC ----- 540005AD -> Branch

/*
3D60803F 616B0A20
886B0000 2C030034
41820014 700C0004
4182000C 38630001
48000018 2C030031
41820030 700C0008
41820028 3863FFFF
986B0000 3D60803F
616BA2E4 986B0000
39800002 3D608048
998DB60F 998B9D35
70000200 00000000
*/

# 803f0a20	address of 'u' character in ascii string for "MnSlMap.usd"
# 803FA2E4	SSS page id
# 80335B74	update scene code (dynamic; will change)
# 803FA1B0	base address for all pages' RSS flags
# 8045C388	SSS flags currently used by the game

# Load the byte describing which SSS is active (current MnSlMap loaded)
lis r11, 0x803F
ori r11, r11, 0x0A20 # r11 = address of 'u' character in ascii string for "MnSlMap.usd"
lbz r3, 0(r11)
cmpwi r3, 0x34
beq CHECK_DPAD_UP # Skip checking for D-pad down if on the 4th SSS

# Check for D-Pad Down  (r0 contains the current player's button input)
andi. r12, r0, 4
beq CHECK_DPAD_UP # D-Pad Down not pressed
addi r4, r3, 1 # increment the SSS byte
b CHANGE_SSS

CHECK_DPAD_UP:
cmpwi r3, 0x31
beq END # Skip checking for D-pad up if on the 1st SSS; done checking input
# Check for D-Pad Up
andi. r12, r0, 8
beq END
subi r4, r3, 1 # decrement the SSS byte

CHANGE_SSS:
# Update the index byte in "MnSlMap._sd", for the new SSS file name
stb r4, 0(r11)
# Update the SSS page ID byte
lis r11, 0x803F
ori r11, r11, 0xA2E4
stb r4, 0(r11)
# Update the SdMenu._sd file string
lis r12, 0x803e
ori r12, r12, 0xc5c7	# load address of the 'u' in the extension
stb r4, 0(r12)
# Update the SdSlChr._sd file string (no longer needed? might be able to depricate)
lis r12, 0x803f
ori r12, r12, 0x11ac	# load address of the 'u' in the extension
stb r4, 0(r12)

# Store RSS flags for the previous page (to all pages' allocation)
subi r11, r11, 0x134	# load base address to all pages' RSS flags (803FA1B0)
lis r12, 0x8045
ori r12, r12, 0xC388	# load address of currenly used RSS flags
lwz r5, 0(r12)		# load current RSS flags
subi r3, r3, 0x30       # convert old SSS page number to 1-index
mulli r3, r3, 0x4       # convert page # to a multiple of 4 byte offset
stwx r5, r11, r3	# store (at r11+r3)

# Load RSS flags for the current/new page (from all pages' allocation)
subi r4, r4, 0x30       # convert new SSS page number to 1-index
mulli r4, r4, 0x4       # convert page # to a multiple of 4 byte offset
lwzx r11, r11, r4	# load new flags from all pages' allocation
stw r11, 0(r12)		# store to 'current' flags location

# Reload the scene
li r12,2
lis r11, 0x80479D35+0x10000@h
stb r12, -0x49F1(r13)
stb r12, 0x80479D35-0x10000@l(r11)
# trigger ID (2) is stored in r13 global
# target scene ID + 1 (2) is stored in

END:
andi. r0,r0,512
.long 0 # Return branch

------------- 0x803FA2E4 ---- 3F -> 31 # SSS page ID byte


	-==-


L+R+Start During Stage Load Back to Last CSS
[Achilles]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
1.02 ----- 0x8025B8BC --- 38600001 -> 887DFFA0


	-==-


Hold Start to Force Through Results Screen
- relies on my custom start hold counter function/flags
[Achilles]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
1.02 ----- 0x801795B8 --- 901F0008 -> Branch

38ADB4EF 38800004
7C8903A6 8C850001
2C040078 4180000C
3C808048 90A49D64
4200FFEC 901F0008
48000000


	-==-


Skip Results Screen
- KO Stars = Games Won
[Achilles]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
1.02 ----- 0x801a5b00 --- 3b640000 -> Branch

3F808045 639C21F8
3BC00000 877C0E90
2C1B0003 41820014
3BDE0001 837CFFFC
2C1B001A 4080002C
3F608045 637B7958
7C1BE000 40A2FFD8
2C1E0005 40800014
3F808040 839CA3D4
2C1C0000 418200BC
3FE08046 63FFB6A0
8B7F24C8 577BDF7E
237B0001 7F7B0034
577FD97E 2C1F0000
41820090 3BE000FF
3F608045 839B2C6C
2C1C0001 40820018
8BFB2F2D 3BFF0001
2C1F0005 41800008
3BE000FF 3B600000
3B7B0001 2C1B0005
41820058 3F80804D
639C65A7 7F9CD8AE
2C1C0000 40A2FFE4
7C1BF800 41A2FFDC
1FDB0E90 3F808045
639C21F8 7F9CF02E
2C1C0003 41A2FFC4
3F80804D 639C672F
7FDCD8AE 2C1E00FF
41A2FFB0 3BDE0001
7FDCD9AE 4BFFFFA4
3B600000 48000008
3B600004 48000000


	-==-


Hold Z for Clap Win Animation
[Achilles]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
1.02 ----- 0x800bead4 --- 809D0008 -> Branch

809D0008 2C040003
40800024 3C60804C
60631FAC 899F006C
1D8C0044 7D8C182E
558306F7 41820008
38800004 48000000


	-==-


RANDOM Stage Select uses 20XX Stage Swap Code
[Achilles, DRGN]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
1.02 ----- 0x8025b878 --- 88030000 -> Branch

# SceneThink_SSS injection
3983FFF5 7C832378
7D846378 3D808025
618CBB40 7D8903A6
4E800420 48000000

---------- 0x80235c30 --- BB010030 -> Branch

# RandomStageSelect_LoadStageText injection to add 'Page x' text
.include "CommonMCM.s"

# Allocate memory for a text object
lis	r3, <<PageTextProps>>@h
ori	r3, r3, <<PageTextProps>>@l
lfs 	f1, 0(r3)		# X coord
lfs 	f2, 4(r3)		# Y coord
lfs	f3, -0x3B30 (rtoc)	# Z coord (17.5)
lfs	f4, -0x3B2C (rtoc)	# aspect? (160)
lfs	f5, -0x3B28 (rtoc)	# aspect? (300)
li 	r3, 0			# SIS ID
lbz 	r4, -0x4AEB(r13)	# Text Canvas ID
bl	0x803A5ACC		# Text_AllocateTextObject
lis	r4, <<PageTextProps>>@h
ori	r4, r4, <<PageTextProps>>@l
stw	r3, 0x8(r4)		# store pointer for later use in removing this text

# Adjust text struct properties
li	r4, 1
stb	r4, 0x0048 (r3) # Use kerning
lfs	f1, -0x3B24 (rtoc)
stfs	f1, 0x0024 (r3) # Set X scaling to 0.05209999904036522 (0x3D5566CF)
stfs	f1, 0x0028 (r3) # Y scaling

# Load SIS text data
li 	r4, 37			# SIS index for 'Page x' text (r3 already loaded)
bl 	0x803A6368		# goto Text_CopyPremadeTextDataToStruct

ExitStageLeft:
lmw	r24, 0x0030 (sp)	# Orig code line
b 0

---------- 0x80236be0 --- 7F43D378 -> Branch

# Remove the 'Page _' text
lis	r3, <<PageTextProps>>@h
ori	r3, r3, <<PageTextProps>>@l
lwz	r3, 0x8(r3)
bl	0x803a5cc4	# Text_RemoveText

mr	r3, r26 # original code line
b 0

<PageTextProps> # xCoord, yCoord
40F00000 C0FE6666 # 7.5, -7.95
00000000          # Text struct pointer placeholder

	-==-


L-Cancel % on Results Screen
[Achilles]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
1.02 ----- 0x80040bbc --- 90030C68 -> 60000000
# Disables DamageRecovered results stat from being written

1.02 ----- 0x80040be8 --- 80630C68 -> Branch

A2030C68 A2230C6A
7E318214 1E100064
7C708BD6 48000000
# Performs division and stores as stat in place of normal DamageRecovered